import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:go_router/go_router.dart';
import '../widgets/background_screen.dart';
import '../services/auth_service.dart';
import 'package:lineage3/services/character_service.dart';

class StartScreen extends StatefulWidget {
  final CharacterService characterService;
  const StartScreen({super.key, required this.characterService});

  @override
  StartScreenState createState() => StartScreenState();
}

class StartScreenState extends State<StartScreen> {
  late final AuthService _authService;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  @override
  void initState() {
    super.initState();
    _authService = AuthService(characterService: widget.characterService);
    _checkCharacter();
  }

  Future<void> _checkCharacter() async {
    final user = FirebaseAuth.instance.currentUser;

    if (user == null) {
      debugPrint('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /');
      if (mounted) context.go('/');  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
      return;
    }

    debugPrint('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è userId: ${user.uid}');

    try {
      // –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ userId
      final querySnapshot = await _firestore
          .collection('characters')
          .where('userId', isEqualTo: user.uid)  // –ò—â–µ–º –ø–æ –ø–æ–ª—é userId
          .limit(1)
          .get();

      debugPrint('üìä –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ${querySnapshot.docs.length}');

      if (!mounted) return;

      if (querySnapshot.docs.isNotEmpty) {
        final characterId = querySnapshot.docs.first.id;
        debugPrint('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞–π–¥–µ–Ω! ID: $characterId. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ /game/$characterId');
        context.go('/game/$characterId');  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
      } else {
        debugPrint('‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ /character');
        context.go('/character');  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ Firestore: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BackgroundScreen(
        child: Align(
          alignment: const Alignment(0, 0.8),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              Padding(
                padding: const EdgeInsets.only(bottom: 200),
                child: ElevatedButton(
                  onPressed: () => context.go('/character'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color.fromRGBO(0, 0, 255, 0.3),
                    padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 15),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                    elevation: 5,
                  ),
                  child: const Text(
                    '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(bottom: 20),
                child: ElevatedButton.icon(
                  onPressed: _signInWithGoogle,
                  icon: const Icon(Icons.account_circle, color: Colors.white),
                  label: const Text('–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google', style: TextStyle(color: Colors.white)),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color.fromRGBO(0, 0, 255, 0.3),
                    padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 15),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                    elevation: 5,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _signInWithGoogle() async {
    try {
      debugPrint('üîë –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google...');
      await _authService.signInWithGoogle(context);
      debugPrint('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...');
      if (mounted) _checkCharacter();  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e')),
        );
      }
    }
  }
}
